
import React from 'react';
import { jsPDF } from 'jspdf';
import QRCode from 'qr-code-styling';
import { format } from 'date-fns';

interface TicketData {
  eventName: string;
  eventDate: Date;
  eventLocation: string;
  ticketType: string;
  attendeeName: string;
  attendeeEmail: string;
  ticketId: string;
  organizerLogo?: string;
  primaryColor?: string;
}

// This function generates and returns a QR code data URL
const generateQrCodeDataUrl = async (data: string): Promise<string> => {
  const qrCode = new QRCode({
    width: 200,
    height: 200,
    type: 'svg',
    data: data,
    image: undefined,
    dotsOptions: {
      color: '#000000',
      type: 'rounded'
    },
    backgroundOptions: {
      color: '#ffffff',
    },
    cornersSquareOptions: {
      color: '#6D28D9', // Use the Tixify brand color
      type: 'extra-rounded',
    },
    cornersDotOptions: {
      color: '#6D28D9', // Use the Tixify brand color
      type: 'dot',
    },
  });
  
  return new Promise((resolve) => {
    qrCode.getRawData('svg').then((data) => {
      const reader = new FileReader();
      reader.onload = () => {
        if (typeof reader.result === 'string') {
          resolve(reader.result);
        }
      };
      reader.readAsDataURL(new Blob([data as BlobPart], { type: 'image/svg+xml' }));
    });
  });
};

// Function to generate a PDF ticket
export const generateTicketPDF = async (ticketData: TicketData): Promise<Blob> => {
  // Initialize PDF document
  const pdf = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });
  
  // Set default primary color if not provided
  const primaryColor = ticketData.primaryColor || '#6D28D9';
  
  // Add background color/pattern
  pdf.setFillColor(248, 250, 252); // Light gray background
  pdf.rect(0, 0, 210, 297, 'F');
  
  // Add ticket border
  pdf.setDrawColor(primaryColor);
  pdf.setLineWidth(0.5);
  pdf.roundedRect(20, 20, 170, 200, 5, 5, 'S');
  
  // Add dashed line for tear-off portion
  pdf.setLineDashPattern([3, 3], 0);
  pdf.line(20, 170, 190, 170);
  pdf.setLineDashPattern([], 0);
  
  // Add Tixify header
  pdf.setFillColor(primaryColor);
  pdf.rect(20, 20, 170, 15, 'F');
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(16);
  pdf.text('TIXIFY', 105, 30, { align: 'center' });
  
  // Add event information
  pdf.setTextColor(0, 0, 0);
  pdf.setFont('helvetica', 'bold');
  pdf.setFontSize(18);
  pdf.text(ticketData.eventName, 105, 50, { align: 'center' });
  
  pdf.setFont('helvetica', 'normal');
  pdf.setFontSize(12);
  pdf.text(`Date: ${format(ticketData.eventDate, 'EEEE, MMMM d, yyyy - h:mm a')}`, 30, 65);
  pdf.text(`Location: ${ticketData.eventLocation}`, 30, 75);
  pdf.text(`Ticket Type: ${ticketData.ticketType}`, 30, 85);
  pdf.text(`Attendee: ${ticketData.attendeeName}`, 30, 95);
  
  // Add QR Code
  try {
    // Generate QR code with ticket information
    const qrData = JSON.stringify({
      ticketId: ticketData.ticketId,
      eventName: ticketData.eventName,
      attendee: ticketData.attendeeName,
      email: ticketData.attendeeEmail,
    });
    
    const qrCodeDataUrl = await generateQrCodeDataUrl(qrData);
    pdf.addImage(qrCodeDataUrl, 'PNG', 70, 105, 70, 70);
    
    // Add ticket ID
    pdf.setFontSize(10);
    pdf.text(`Ticket ID: ${ticketData.ticketId}`, 105, 185, { align: 'center' });
    
    // Add footer
    pdf.setFontSize(8);
    pdf.setTextColor(128, 128, 128);
    pdf.text('This ticket was generated by Tixify - Your Event Platform', 105, 215, { align: 'center' });
    
    // Add organizer logo if provided
    if (ticketData.organizerLogo) {
      try {
        pdf.addImage(ticketData.organizerLogo, 'PNG', 155, 25, 30, 30);
      } catch (error) {
        console.error('Error adding organizer logo to PDF:', error);
      }
    }
    
    return pdf.output('blob');
    
  } catch (error) {
    console.error('Error generating QR code:', error);
    throw new Error('Failed to generate ticket PDF');
  }
};

// Function to send a ticket via email (This would connect to Resend API in a real implementation)
export const sendTicketEmail = async (
  ticketData: TicketData,
  pdfBlob: Blob
): Promise<boolean> => {
  // In a real implementation, this would use Resend to send an email with the PDF attachment
  console.log(`Would send email to ${ticketData.attendeeEmail} with ticket for ${ticketData.eventName}`);
  
  // Mock successful email sending
  return true;
};
